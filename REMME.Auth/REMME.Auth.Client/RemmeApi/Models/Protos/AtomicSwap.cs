// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: atomic_swap.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace REMME.Auth.Client.RemmeApi.Models.Proto
{

    /// <summary>Holder for reflection information generated from atomic_swap.proto</summary>
    public static partial class AtomicSwapReflection
    {

        #region Descriptor
        /// <summary>File descriptor for atomic_swap.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static AtomicSwapReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChFhdG9taWNfc3dhcC5wcm90byJfChBBdG9taWNTd2FwTWV0aG9kIksKBk1l",
                  "dGhvZBIICgRJTklUEAASCwoHQVBQUk9WRRABEgoKBkVYUElSRRACEhMKD1NF",
                  "VF9TRUNSRVRfTE9DSxADEgkKBUNMT1NFEAQi2AEKFUF0b21pY1N3YXBJbml0",
                  "UGF5bG9hZBIYChByZWNlaXZlcl9hZGRyZXNzGAEgASgJEiAKGHNlbmRlcl9h",
                  "ZGRyZXNzX25vbl9sb2NhbBgHIAEoCRIOCgZhbW91bnQYAiABKAQSDwoHc3dh",
                  "cF9pZBgDIAEoCRIgChhzZWNyZXRfbG9ja19ieV9zb2xpY2l0b3IYBCABKAkS",
                  "LAokZW1haWxfYWRkcmVzc19lbmNyeXB0ZWRfYnlfaW5pdGlhdG9yGAUgASgJ",
                  "EhIKCmNyZWF0ZWRfYXQYBiABKA0iKwoYQXRvbWljU3dhcEFwcHJvdmVQYXls",
                  "b2FkEg8KB3N3YXBfaWQYASABKAkiKgoXQXRvbWljU3dhcEV4cGlyZVBheWxv",
                  "YWQSDwoHc3dhcF9pZBgBIAEoCSJGCh5BdG9taWNTd2FwU2V0U2VjcmV0TG9j",
                  "a1BheWxvYWQSDwoHc3dhcF9pZBgBIAEoCRITCgtzZWNyZXRfbG9jaxgCIAEo",
                  "CSI9ChZBdG9taWNTd2FwQ2xvc2VQYXlsb2FkEg8KB3N3YXBfaWQYASABKAkS",
                  "EgoKc2VjcmV0X2tleRgCIAEoCSKqAgoOQXRvbWljU3dhcEluZm8SEQoJaXNf",
                  "Y2xvc2VkGAEgASgIEhMKC2lzX2FwcHJvdmVkGAsgASgIEhYKDnNlbmRlcl9h",
                  "ZGRyZXNzGAIgASgJEiAKGHNlbmRlcl9hZGRyZXNzX25vbl9sb2NhbBgMIAEo",
                  "CRIYChByZWNlaXZlcl9hZGRyZXNzGAMgASgJEg4KBmFtb3VudBgEIAEoBBIo",
                  "CiBlbWFpbF9hZGRyZXNzX2VuY3J5cHRlZF9vcHRpb25hbBgFIAEoCRIPCgdz",
                  "d2FwX2lkGAYgASgJEhMKC3NlY3JldF9sb2NrGAcgASgJEhIKCnNlY3JldF9r",
                  "ZXkYCCABKAkSEgoKY3JlYXRlZF9hdBgJIAEoDRIUCgxpc19pbml0aWF0b3IY",
                  "CiABKAhCKqoCJ1JFTU1FLkF1dGguQ2xpZW50LlJlbW1lQXBpLk1vZGVscy5Q",
                  "cm90b2IGcHJvdG8z"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapMethod), global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapMethod.Parser, null, null, new[]{ typeof(global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapMethod.Types.Method) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapInitPayload), global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapInitPayload.Parser, new[]{ "ReceiverAddress", "SenderAddressNonLocal", "Amount", "SwapId", "SecretLockBySolicitor", "EmailAddressEncryptedByInitiator", "CreatedAt" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapApprovePayload), global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapApprovePayload.Parser, new[]{ "SwapId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapExpirePayload), global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapExpirePayload.Parser, new[]{ "SwapId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapSetSecretLockPayload), global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapSetSecretLockPayload.Parser, new[]{ "SwapId", "SecretLock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapClosePayload), global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapClosePayload.Parser, new[]{ "SwapId", "SecretKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapInfo), global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapInfo.Parser, new[]{ "IsClosed", "IsApproved", "SenderAddress", "SenderAddressNonLocal", "ReceiverAddress", "Amount", "EmailAddressEncryptedOptional", "SwapId", "SecretLock", "SecretKey", "CreatedAt", "IsInitiator" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class AtomicSwapMethod : pb::IMessage<AtomicSwapMethod>
    {
        private static readonly pb::MessageParser<AtomicSwapMethod> _parser = new pb::MessageParser<AtomicSwapMethod>(() => new AtomicSwapMethod());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AtomicSwapMethod> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapMethod()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapMethod(AtomicSwapMethod other) : this()
        {
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapMethod Clone()
        {
            return new AtomicSwapMethod(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AtomicSwapMethod);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AtomicSwapMethod other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AtomicSwapMethod other)
        {
            if (other == null)
            {
                return;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the AtomicSwapMethod message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Method
            {
                [pbr::OriginalName("INIT")] Init = 0,
                [pbr::OriginalName("APPROVE")] Approve = 1,
                [pbr::OriginalName("EXPIRE")] Expire = 2,
                [pbr::OriginalName("SET_SECRET_LOCK")] SetSecretLock = 3,
                [pbr::OriginalName("CLOSE")] Close = 4,
            }

        }
        #endregion

    }

    public sealed partial class AtomicSwapInitPayload : pb::IMessage<AtomicSwapInitPayload>
    {
        private static readonly pb::MessageParser<AtomicSwapInitPayload> _parser = new pb::MessageParser<AtomicSwapInitPayload>(() => new AtomicSwapInitPayload());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AtomicSwapInitPayload> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapInitPayload()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapInitPayload(AtomicSwapInitPayload other) : this()
        {
            receiverAddress_ = other.receiverAddress_;
            senderAddressNonLocal_ = other.senderAddressNonLocal_;
            amount_ = other.amount_;
            swapId_ = other.swapId_;
            secretLockBySolicitor_ = other.secretLockBySolicitor_;
            emailAddressEncryptedByInitiator_ = other.emailAddressEncryptedByInitiator_;
            createdAt_ = other.createdAt_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapInitPayload Clone()
        {
            return new AtomicSwapInitPayload(this);
        }

        /// <summary>Field number for the "receiver_address" field.</summary>
        public const int ReceiverAddressFieldNumber = 1;
        private string receiverAddress_ = "";
        /// <summary>
        /// REMchain agent to receive funds
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ReceiverAddress
        {
            get { return receiverAddress_; }
            set
            {
                receiverAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "sender_address_non_local" field.</summary>
        public const int SenderAddressNonLocalFieldNumber = 7;
        private string senderAddressNonLocal_ = "";
        /// <summary>
        /// Address to receive arranged equivalent on the other chain (non local one)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SenderAddressNonLocal
        {
            get { return senderAddressNonLocal_; }
            set
            {
                senderAddressNonLocal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 2;
        private ulong amount_;
        /// <summary>
        /// The amount to be transferred
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Amount
        {
            get { return amount_; }
            set
            {
                amount_ = value;
            }
        }

        /// <summary>Field number for the "swap_id" field.</summary>
        public const int SwapIdFieldNumber = 3;
        private string swapId_ = "";
        /// <summary>
        /// Swap unique id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SwapId
        {
            get { return swapId_; }
            set
            {
                swapId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "secret_lock_by_solicitor" field.</summary>
        public const int SecretLockBySolicitorFieldNumber = 4;
        private string secretLockBySolicitor_ = "";
        /// <summary>
        /// A secret lock, provided during initialisation, only if REMchain side is a solicitor (non initiator)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SecretLockBySolicitor
        {
            get { return secretLockBySolicitor_; }
            set
            {
                secretLockBySolicitor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "email_address_encrypted_by_initiator" field.</summary>
        public const int EmailAddressEncryptedByInitiatorFieldNumber = 5;
        private string emailAddressEncryptedByInitiator_ = "";
        /// <summary>
        /// An email address provided by swap initiator (Alice) to be notified of the next step
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EmailAddressEncryptedByInitiator
        {
            get { return emailAddressEncryptedByInitiator_; }
            set
            {
                emailAddressEncryptedByInitiator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "created_at" field.</summary>
        public const int CreatedAtFieldNumber = 6;
        private uint createdAt_;
        /// <summary>
        /// Creation date in a timestamp format
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CreatedAt
        {
            get { return createdAt_; }
            set
            {
                createdAt_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AtomicSwapInitPayload);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AtomicSwapInitPayload other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ReceiverAddress != other.ReceiverAddress) return false;
            if (SenderAddressNonLocal != other.SenderAddressNonLocal) return false;
            if (Amount != other.Amount) return false;
            if (SwapId != other.SwapId) return false;
            if (SecretLockBySolicitor != other.SecretLockBySolicitor) return false;
            if (EmailAddressEncryptedByInitiator != other.EmailAddressEncryptedByInitiator) return false;
            if (CreatedAt != other.CreatedAt) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ReceiverAddress.Length != 0) hash ^= ReceiverAddress.GetHashCode();
            if (SenderAddressNonLocal.Length != 0) hash ^= SenderAddressNonLocal.GetHashCode();
            if (Amount != 0UL) hash ^= Amount.GetHashCode();
            if (SwapId.Length != 0) hash ^= SwapId.GetHashCode();
            if (SecretLockBySolicitor.Length != 0) hash ^= SecretLockBySolicitor.GetHashCode();
            if (EmailAddressEncryptedByInitiator.Length != 0) hash ^= EmailAddressEncryptedByInitiator.GetHashCode();
            if (CreatedAt != 0) hash ^= CreatedAt.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (ReceiverAddress.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(ReceiverAddress);
            }
            if (Amount != 0UL)
            {
                output.WriteRawTag(16);
                output.WriteUInt64(Amount);
            }
            if (SwapId.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(SwapId);
            }
            if (SecretLockBySolicitor.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(SecretLockBySolicitor);
            }
            if (EmailAddressEncryptedByInitiator.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(EmailAddressEncryptedByInitiator);
            }
            if (CreatedAt != 0)
            {
                output.WriteRawTag(48);
                output.WriteUInt32(CreatedAt);
            }
            if (SenderAddressNonLocal.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteString(SenderAddressNonLocal);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (ReceiverAddress.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ReceiverAddress);
            }
            if (SenderAddressNonLocal.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderAddressNonLocal);
            }
            if (Amount != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Amount);
            }
            if (SwapId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SwapId);
            }
            if (SecretLockBySolicitor.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SecretLockBySolicitor);
            }
            if (EmailAddressEncryptedByInitiator.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EmailAddressEncryptedByInitiator);
            }
            if (CreatedAt != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreatedAt);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AtomicSwapInitPayload other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ReceiverAddress.Length != 0)
            {
                ReceiverAddress = other.ReceiverAddress;
            }
            if (other.SenderAddressNonLocal.Length != 0)
            {
                SenderAddressNonLocal = other.SenderAddressNonLocal;
            }
            if (other.Amount != 0UL)
            {
                Amount = other.Amount;
            }
            if (other.SwapId.Length != 0)
            {
                SwapId = other.SwapId;
            }
            if (other.SecretLockBySolicitor.Length != 0)
            {
                SecretLockBySolicitor = other.SecretLockBySolicitor;
            }
            if (other.EmailAddressEncryptedByInitiator.Length != 0)
            {
                EmailAddressEncryptedByInitiator = other.EmailAddressEncryptedByInitiator;
            }
            if (other.CreatedAt != 0)
            {
                CreatedAt = other.CreatedAt;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            ReceiverAddress = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            Amount = input.ReadUInt64();
                            break;
                        }
                    case 26:
                        {
                            SwapId = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            SecretLockBySolicitor = input.ReadString();
                            break;
                        }
                    case 42:
                        {
                            EmailAddressEncryptedByInitiator = input.ReadString();
                            break;
                        }
                    case 48:
                        {
                            CreatedAt = input.ReadUInt32();
                            break;
                        }
                    case 58:
                        {
                            SenderAddressNonLocal = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AtomicSwapApprovePayload : pb::IMessage<AtomicSwapApprovePayload>
    {
        private static readonly pb::MessageParser<AtomicSwapApprovePayload> _parser = new pb::MessageParser<AtomicSwapApprovePayload>(() => new AtomicSwapApprovePayload());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AtomicSwapApprovePayload> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapApprovePayload()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapApprovePayload(AtomicSwapApprovePayload other) : this()
        {
            swapId_ = other.swapId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapApprovePayload Clone()
        {
            return new AtomicSwapApprovePayload(this);
        }

        /// <summary>Field number for the "swap_id" field.</summary>
        public const int SwapIdFieldNumber = 1;
        private string swapId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SwapId
        {
            get { return swapId_; }
            set
            {
                swapId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AtomicSwapApprovePayload);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AtomicSwapApprovePayload other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SwapId != other.SwapId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (SwapId.Length != 0) hash ^= SwapId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SwapId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(SwapId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (SwapId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SwapId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AtomicSwapApprovePayload other)
        {
            if (other == null)
            {
                return;
            }
            if (other.SwapId.Length != 0)
            {
                SwapId = other.SwapId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            SwapId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AtomicSwapExpirePayload : pb::IMessage<AtomicSwapExpirePayload>
    {
        private static readonly pb::MessageParser<AtomicSwapExpirePayload> _parser = new pb::MessageParser<AtomicSwapExpirePayload>(() => new AtomicSwapExpirePayload());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AtomicSwapExpirePayload> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapExpirePayload()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapExpirePayload(AtomicSwapExpirePayload other) : this()
        {
            swapId_ = other.swapId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapExpirePayload Clone()
        {
            return new AtomicSwapExpirePayload(this);
        }

        /// <summary>Field number for the "swap_id" field.</summary>
        public const int SwapIdFieldNumber = 1;
        private string swapId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SwapId
        {
            get { return swapId_; }
            set
            {
                swapId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AtomicSwapExpirePayload);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AtomicSwapExpirePayload other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SwapId != other.SwapId) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (SwapId.Length != 0) hash ^= SwapId.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SwapId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(SwapId);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (SwapId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SwapId);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AtomicSwapExpirePayload other)
        {
            if (other == null)
            {
                return;
            }
            if (other.SwapId.Length != 0)
            {
                SwapId = other.SwapId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            SwapId = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AtomicSwapSetSecretLockPayload : pb::IMessage<AtomicSwapSetSecretLockPayload>
    {
        private static readonly pb::MessageParser<AtomicSwapSetSecretLockPayload> _parser = new pb::MessageParser<AtomicSwapSetSecretLockPayload>(() => new AtomicSwapSetSecretLockPayload());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AtomicSwapSetSecretLockPayload> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapSetSecretLockPayload()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapSetSecretLockPayload(AtomicSwapSetSecretLockPayload other) : this()
        {
            swapId_ = other.swapId_;
            secretLock_ = other.secretLock_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapSetSecretLockPayload Clone()
        {
            return new AtomicSwapSetSecretLockPayload(this);
        }

        /// <summary>Field number for the "swap_id" field.</summary>
        public const int SwapIdFieldNumber = 1;
        private string swapId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SwapId
        {
            get { return swapId_; }
            set
            {
                swapId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "secret_lock" field.</summary>
        public const int SecretLockFieldNumber = 2;
        private string secretLock_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SecretLock
        {
            get { return secretLock_; }
            set
            {
                secretLock_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AtomicSwapSetSecretLockPayload);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AtomicSwapSetSecretLockPayload other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SwapId != other.SwapId) return false;
            if (SecretLock != other.SecretLock) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (SwapId.Length != 0) hash ^= SwapId.GetHashCode();
            if (SecretLock.Length != 0) hash ^= SecretLock.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SwapId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(SwapId);
            }
            if (SecretLock.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(SecretLock);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (SwapId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SwapId);
            }
            if (SecretLock.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SecretLock);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AtomicSwapSetSecretLockPayload other)
        {
            if (other == null)
            {
                return;
            }
            if (other.SwapId.Length != 0)
            {
                SwapId = other.SwapId;
            }
            if (other.SecretLock.Length != 0)
            {
                SecretLock = other.SecretLock;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            SwapId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            SecretLock = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AtomicSwapClosePayload : pb::IMessage<AtomicSwapClosePayload>
    {
        private static readonly pb::MessageParser<AtomicSwapClosePayload> _parser = new pb::MessageParser<AtomicSwapClosePayload>(() => new AtomicSwapClosePayload());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AtomicSwapClosePayload> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapClosePayload()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapClosePayload(AtomicSwapClosePayload other) : this()
        {
            swapId_ = other.swapId_;
            secretKey_ = other.secretKey_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapClosePayload Clone()
        {
            return new AtomicSwapClosePayload(this);
        }

        /// <summary>Field number for the "swap_id" field.</summary>
        public const int SwapIdFieldNumber = 1;
        private string swapId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SwapId
        {
            get { return swapId_; }
            set
            {
                swapId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "secret_key" field.</summary>
        public const int SecretKeyFieldNumber = 2;
        private string secretKey_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SecretKey
        {
            get { return secretKey_; }
            set
            {
                secretKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AtomicSwapClosePayload);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AtomicSwapClosePayload other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SwapId != other.SwapId) return false;
            if (SecretKey != other.SecretKey) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (SwapId.Length != 0) hash ^= SwapId.GetHashCode();
            if (SecretKey.Length != 0) hash ^= SecretKey.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (SwapId.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(SwapId);
            }
            if (SecretKey.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(SecretKey);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (SwapId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SwapId);
            }
            if (SecretKey.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SecretKey);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AtomicSwapClosePayload other)
        {
            if (other == null)
            {
                return;
            }
            if (other.SwapId.Length != 0)
            {
                SwapId = other.SwapId;
            }
            if (other.SecretKey.Length != 0)
            {
                SecretKey = other.SecretKey;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            SwapId = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            SecretKey = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AtomicSwapInfo : pb::IMessage<AtomicSwapInfo>
    {
        private static readonly pb::MessageParser<AtomicSwapInfo> _parser = new pb::MessageParser<AtomicSwapInfo>(() => new AtomicSwapInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AtomicSwapInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::REMME.Auth.Client.RemmeApi.Models.Proto.AtomicSwapReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapInfo()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapInfo(AtomicSwapInfo other) : this()
        {
            isClosed_ = other.isClosed_;
            isApproved_ = other.isApproved_;
            senderAddress_ = other.senderAddress_;
            senderAddressNonLocal_ = other.senderAddressNonLocal_;
            receiverAddress_ = other.receiverAddress_;
            amount_ = other.amount_;
            emailAddressEncryptedOptional_ = other.emailAddressEncryptedOptional_;
            swapId_ = other.swapId_;
            secretLock_ = other.secretLock_;
            secretKey_ = other.secretKey_;
            createdAt_ = other.createdAt_;
            isInitiator_ = other.isInitiator_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AtomicSwapInfo Clone()
        {
            return new AtomicSwapInfo(this);
        }

        /// <summary>Field number for the "is_closed" field.</summary>
        public const int IsClosedFieldNumber = 1;
        private bool isClosed_;
        /// <summary>
        /// if the swap is closed and unavailable for actions upon it
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsClosed
        {
            get { return isClosed_; }
            set
            {
                isClosed_ = value;
            }
        }

        /// <summary>Field number for the "is_approved" field.</summary>
        public const int IsApprovedFieldNumber = 11;
        private bool isApproved_;
        /// <summary>
        /// if Alice approved the swap, initiated by herself
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsApproved
        {
            get { return isApproved_; }
            set
            {
                isApproved_ = value;
            }
        }

        /// <summary>Field number for the "sender_address" field.</summary>
        public const int SenderAddressFieldNumber = 2;
        private string senderAddress_ = "";
        /// <summary>
        /// Address of the agent on the REMchain side soliciting the exchange
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SenderAddress
        {
            get { return senderAddress_; }
            set
            {
                senderAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "sender_address_non_local" field.</summary>
        public const int SenderAddressNonLocalFieldNumber = 12;
        private string senderAddressNonLocal_ = "";
        /// <summary>
        /// Address to receive arranged equivalent on the other chain (non local one)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SenderAddressNonLocal
        {
            get { return senderAddressNonLocal_; }
            set
            {
                senderAddressNonLocal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "receiver_address" field.</summary>
        public const int ReceiverAddressFieldNumber = 3;
        private string receiverAddress_ = "";
        /// <summary>
        /// REMchain agent to receive funds
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ReceiverAddress
        {
            get { return receiverAddress_; }
            set
            {
                receiverAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "amount" field.</summary>
        public const int AmountFieldNumber = 4;
        private ulong amount_;
        /// <summary>
        /// The amount to be transferred
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Amount
        {
            get { return amount_; }
            set
            {
                amount_ = value;
            }
        }

        /// <summary>Field number for the "email_address_encrypted_optional" field.</summary>
        public const int EmailAddressEncryptedOptionalFieldNumber = 5;
        private string emailAddressEncryptedOptional_ = "";
        /// <summary>
        /// email address for solicitor (Bob) to notify the swap initiator (Alice)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string EmailAddressEncryptedOptional
        {
            get { return emailAddressEncryptedOptional_; }
            set
            {
                emailAddressEncryptedOptional_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "swap_id" field.</summary>
        public const int SwapIdFieldNumber = 6;
        private string swapId_ = "";
        /// <summary>
        /// Swap unique id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SwapId
        {
            get { return swapId_; }
            set
            {
                swapId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "secret_lock" field.</summary>
        public const int SecretLockFieldNumber = 7;
        private string secretLock_ = "";
        /// <summary>
        /// A secret lock to successfuly match with a secret_key and close the swap
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SecretLock
        {
            get { return secretLock_; }
            set
            {
                secretLock_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "secret_key" field.</summary>
        public const int SecretKeyFieldNumber = 8;
        private string secretKey_ = "";
        /// <summary>
        /// Last step information, provided to as a secret for solicitor
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SecretKey
        {
            get { return secretKey_; }
            set
            {
                secretKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "created_at" field.</summary>
        public const int CreatedAtFieldNumber = 9;
        private uint createdAt_;
        /// <summary>
        /// Creation date in a timestamp format
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint CreatedAt
        {
            get { return createdAt_; }
            set
            {
                createdAt_ = value;
            }
        }

        /// <summary>Field number for the "is_initiator" field.</summary>
        public const int IsInitiatorFieldNumber = 10;
        private bool isInitiator_;
        /// <summary>
        /// check weather REMchain side initiated the swap (not a solicitor)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool IsInitiator
        {
            get { return isInitiator_; }
            set
            {
                isInitiator_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AtomicSwapInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AtomicSwapInfo other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (IsClosed != other.IsClosed) return false;
            if (IsApproved != other.IsApproved) return false;
            if (SenderAddress != other.SenderAddress) return false;
            if (SenderAddressNonLocal != other.SenderAddressNonLocal) return false;
            if (ReceiverAddress != other.ReceiverAddress) return false;
            if (Amount != other.Amount) return false;
            if (EmailAddressEncryptedOptional != other.EmailAddressEncryptedOptional) return false;
            if (SwapId != other.SwapId) return false;
            if (SecretLock != other.SecretLock) return false;
            if (SecretKey != other.SecretKey) return false;
            if (CreatedAt != other.CreatedAt) return false;
            if (IsInitiator != other.IsInitiator) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (IsClosed != false) hash ^= IsClosed.GetHashCode();
            if (IsApproved != false) hash ^= IsApproved.GetHashCode();
            if (SenderAddress.Length != 0) hash ^= SenderAddress.GetHashCode();
            if (SenderAddressNonLocal.Length != 0) hash ^= SenderAddressNonLocal.GetHashCode();
            if (ReceiverAddress.Length != 0) hash ^= ReceiverAddress.GetHashCode();
            if (Amount != 0UL) hash ^= Amount.GetHashCode();
            if (EmailAddressEncryptedOptional.Length != 0) hash ^= EmailAddressEncryptedOptional.GetHashCode();
            if (SwapId.Length != 0) hash ^= SwapId.GetHashCode();
            if (SecretLock.Length != 0) hash ^= SecretLock.GetHashCode();
            if (SecretKey.Length != 0) hash ^= SecretKey.GetHashCode();
            if (CreatedAt != 0) hash ^= CreatedAt.GetHashCode();
            if (IsInitiator != false) hash ^= IsInitiator.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (IsClosed != false)
            {
                output.WriteRawTag(8);
                output.WriteBool(IsClosed);
            }
            if (SenderAddress.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(SenderAddress);
            }
            if (ReceiverAddress.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(ReceiverAddress);
            }
            if (Amount != 0UL)
            {
                output.WriteRawTag(32);
                output.WriteUInt64(Amount);
            }
            if (EmailAddressEncryptedOptional.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(EmailAddressEncryptedOptional);
            }
            if (SwapId.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(SwapId);
            }
            if (SecretLock.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteString(SecretLock);
            }
            if (SecretKey.Length != 0)
            {
                output.WriteRawTag(66);
                output.WriteString(SecretKey);
            }
            if (CreatedAt != 0)
            {
                output.WriteRawTag(72);
                output.WriteUInt32(CreatedAt);
            }
            if (IsInitiator != false)
            {
                output.WriteRawTag(80);
                output.WriteBool(IsInitiator);
            }
            if (IsApproved != false)
            {
                output.WriteRawTag(88);
                output.WriteBool(IsApproved);
            }
            if (SenderAddressNonLocal.Length != 0)
            {
                output.WriteRawTag(98);
                output.WriteString(SenderAddressNonLocal);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (IsClosed != false)
            {
                size += 1 + 1;
            }
            if (IsApproved != false)
            {
                size += 1 + 1;
            }
            if (SenderAddress.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderAddress);
            }
            if (SenderAddressNonLocal.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderAddressNonLocal);
            }
            if (ReceiverAddress.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ReceiverAddress);
            }
            if (Amount != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Amount);
            }
            if (EmailAddressEncryptedOptional.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(EmailAddressEncryptedOptional);
            }
            if (SwapId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SwapId);
            }
            if (SecretLock.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SecretLock);
            }
            if (SecretKey.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SecretKey);
            }
            if (CreatedAt != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreatedAt);
            }
            if (IsInitiator != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AtomicSwapInfo other)
        {
            if (other == null)
            {
                return;
            }
            if (other.IsClosed != false)
            {
                IsClosed = other.IsClosed;
            }
            if (other.IsApproved != false)
            {
                IsApproved = other.IsApproved;
            }
            if (other.SenderAddress.Length != 0)
            {
                SenderAddress = other.SenderAddress;
            }
            if (other.SenderAddressNonLocal.Length != 0)
            {
                SenderAddressNonLocal = other.SenderAddressNonLocal;
            }
            if (other.ReceiverAddress.Length != 0)
            {
                ReceiverAddress = other.ReceiverAddress;
            }
            if (other.Amount != 0UL)
            {
                Amount = other.Amount;
            }
            if (other.EmailAddressEncryptedOptional.Length != 0)
            {
                EmailAddressEncryptedOptional = other.EmailAddressEncryptedOptional;
            }
            if (other.SwapId.Length != 0)
            {
                SwapId = other.SwapId;
            }
            if (other.SecretLock.Length != 0)
            {
                SecretLock = other.SecretLock;
            }
            if (other.SecretKey.Length != 0)
            {
                SecretKey = other.SecretKey;
            }
            if (other.CreatedAt != 0)
            {
                CreatedAt = other.CreatedAt;
            }
            if (other.IsInitiator != false)
            {
                IsInitiator = other.IsInitiator;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            IsClosed = input.ReadBool();
                            break;
                        }
                    case 18:
                        {
                            SenderAddress = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            ReceiverAddress = input.ReadString();
                            break;
                        }
                    case 32:
                        {
                            Amount = input.ReadUInt64();
                            break;
                        }
                    case 42:
                        {
                            EmailAddressEncryptedOptional = input.ReadString();
                            break;
                        }
                    case 50:
                        {
                            SwapId = input.ReadString();
                            break;
                        }
                    case 58:
                        {
                            SecretLock = input.ReadString();
                            break;
                        }
                    case 66:
                        {
                            SecretKey = input.ReadString();
                            break;
                        }
                    case 72:
                        {
                            CreatedAt = input.ReadUInt32();
                            break;
                        }
                    case 80:
                        {
                            IsInitiator = input.ReadBool();
                            break;
                        }
                    case 88:
                        {
                            IsApproved = input.ReadBool();
                            break;
                        }
                    case 98:
                        {
                            SenderAddressNonLocal = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
