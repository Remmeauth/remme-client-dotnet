// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: certificate.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace REMME.Auth.Client.RemmeApi.Models.Proto {

  /// <summary>Holder for reflection information generated from certificate.proto</summary>
  public static partial class CertificateReflection {

    #region Descriptor
    /// <summary>File descriptor for certificate.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CertificateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFjZXJ0aWZpY2F0ZS5wcm90byI0ChFDZXJ0aWZpY2F0ZU1ldGhvZCIfCgZN",
            "ZXRob2QSCQoFU1RPUkUQABIKCgZSRVZPS0UQASJ+ChVOZXdDZXJ0aWZpY2F0",
            "ZVBheWxvYWQSFwoPY2VydGlmaWNhdGVfcmF3GAEgASgJEhUKDXNpZ25hdHVy",
            "ZV9yZW0YAiABKAkSFQoNc2lnbmF0dXJlX2NydBgDIAEoCRIeChZjZXJ0X3Np",
            "Z25lcl9wdWJsaWNfa2V5GAQgASgJIisKGFJldm9rZUNlcnRpZmljYXRlUGF5",
            "bG9hZBIPCgdhZGRyZXNzGAEgASgJIkIKEkNlcnRpZmljYXRlU3RvcmFnZRIM",
            "CgRoYXNoGAEgASgJEg0KBW93bmVyGAIgASgJEg8KB3Jldm9rZWQYAyABKAhC",
            "KqoCJ1JFTU1FLkF1dGguQ2xpZW50LlJlbW1lQXBpLk1vZGVscy5Qcm90b2IG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::REMME.Auth.Client.RemmeApi.Models.Proto.CertificateMethod), global::REMME.Auth.Client.RemmeApi.Models.Proto.CertificateMethod.Parser, null, null, new[]{ typeof(global::REMME.Auth.Client.RemmeApi.Models.Proto.CertificateMethod.Types.Method) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::REMME.Auth.Client.RemmeApi.Models.Proto.NewCertificatePayload), global::REMME.Auth.Client.RemmeApi.Models.Proto.NewCertificatePayload.Parser, new[]{ "CertificateRaw", "SignatureRem", "SignatureCrt", "CertSignerPublicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::REMME.Auth.Client.RemmeApi.Models.Proto.RevokeCertificatePayload), global::REMME.Auth.Client.RemmeApi.Models.Proto.RevokeCertificatePayload.Parser, new[]{ "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::REMME.Auth.Client.RemmeApi.Models.Proto.CertificateStorage), global::REMME.Auth.Client.RemmeApi.Models.Proto.CertificateStorage.Parser, new[]{ "Hash", "Owner", "Revoked" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CertificateMethod : pb::IMessage<CertificateMethod> {
    private static readonly pb::MessageParser<CertificateMethod> _parser = new pb::MessageParser<CertificateMethod>(() => new CertificateMethod());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CertificateMethod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::REMME.Auth.Client.RemmeApi.Models.Proto.CertificateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CertificateMethod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CertificateMethod(CertificateMethod other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CertificateMethod Clone() {
      return new CertificateMethod(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CertificateMethod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CertificateMethod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CertificateMethod other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CertificateMethod message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Method {
        [pbr::OriginalName("STORE")] Store = 0,
        [pbr::OriginalName("REVOKE")] Revoke = 1,
      }

    }
    #endregion

  }

  public sealed partial class NewCertificatePayload : pb::IMessage<NewCertificatePayload> {
    private static readonly pb::MessageParser<NewCertificatePayload> _parser = new pb::MessageParser<NewCertificatePayload>(() => new NewCertificatePayload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewCertificatePayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::REMME.Auth.Client.RemmeApi.Models.Proto.CertificateReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewCertificatePayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewCertificatePayload(NewCertificatePayload other) : this() {
      certificateRaw_ = other.certificateRaw_;
      signatureRem_ = other.signatureRem_;
      signatureCrt_ = other.signatureCrt_;
      certSignerPublicKey_ = other.certSignerPublicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewCertificatePayload Clone() {
      return new NewCertificatePayload(this);
    }

    /// <summary>Field number for the "certificate_raw" field.</summary>
    public const int CertificateRawFieldNumber = 1;
    private string certificateRaw_ = "";
    /// <summary>
    /// A raw certificate file in DER encoding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertificateRaw {
      get { return certificateRaw_; }
      set {
        certificateRaw_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature_rem" field.</summary>
    public const int SignatureRemFieldNumber = 2;
    private string signatureRem_ = "";
    /// <summary>
    /// SHA512 hash of certificate_raw signed by the user's private key on REMME
    /// blockchain and then by the private key of the certificate. Needed to
    /// verify, that the user actually owns the provided certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SignatureRem {
      get { return signatureRem_; }
      set {
        signatureRem_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature_crt" field.</summary>
    public const int SignatureCrtFieldNumber = 3;
    private string signatureCrt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SignatureCrt {
      get { return signatureCrt_; }
      set {
        signatureCrt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cert_signer_public_key" field.</summary>
    public const int CertSignerPublicKeyFieldNumber = 4;
    private string certSignerPublicKey_ = "";
    /// <summary>
    /// TODO: Should be removed when we switch to node ECDSA keys
    /// for certificate signing. As far as public key will be
    /// a part of transaction payload
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CertSignerPublicKey {
      get { return certSignerPublicKey_; }
      set {
        certSignerPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewCertificatePayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewCertificatePayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CertificateRaw != other.CertificateRaw) return false;
      if (SignatureRem != other.SignatureRem) return false;
      if (SignatureCrt != other.SignatureCrt) return false;
      if (CertSignerPublicKey != other.CertSignerPublicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CertificateRaw.Length != 0) hash ^= CertificateRaw.GetHashCode();
      if (SignatureRem.Length != 0) hash ^= SignatureRem.GetHashCode();
      if (SignatureCrt.Length != 0) hash ^= SignatureCrt.GetHashCode();
      if (CertSignerPublicKey.Length != 0) hash ^= CertSignerPublicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CertificateRaw.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CertificateRaw);
      }
      if (SignatureRem.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SignatureRem);
      }
      if (SignatureCrt.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SignatureCrt);
      }
      if (CertSignerPublicKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(CertSignerPublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CertificateRaw.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertificateRaw);
      }
      if (SignatureRem.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SignatureRem);
      }
      if (SignatureCrt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SignatureCrt);
      }
      if (CertSignerPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CertSignerPublicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewCertificatePayload other) {
      if (other == null) {
        return;
      }
      if (other.CertificateRaw.Length != 0) {
        CertificateRaw = other.CertificateRaw;
      }
      if (other.SignatureRem.Length != 0) {
        SignatureRem = other.SignatureRem;
      }
      if (other.SignatureCrt.Length != 0) {
        SignatureCrt = other.SignatureCrt;
      }
      if (other.CertSignerPublicKey.Length != 0) {
        CertSignerPublicKey = other.CertSignerPublicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CertificateRaw = input.ReadString();
            break;
          }
          case 18: {
            SignatureRem = input.ReadString();
            break;
          }
          case 26: {
            SignatureCrt = input.ReadString();
            break;
          }
          case 34: {
            CertSignerPublicKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RevokeCertificatePayload : pb::IMessage<RevokeCertificatePayload> {
    private static readonly pb::MessageParser<RevokeCertificatePayload> _parser = new pb::MessageParser<RevokeCertificatePayload>(() => new RevokeCertificatePayload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RevokeCertificatePayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::REMME.Auth.Client.RemmeApi.Models.Proto.CertificateReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevokeCertificatePayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevokeCertificatePayload(RevokeCertificatePayload other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RevokeCertificatePayload Clone() {
      return new RevokeCertificatePayload(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    /// <summary>
    /// The address of a certificate in the storage generated by the transaction processor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RevokeCertificatePayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RevokeCertificatePayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RevokeCertificatePayload other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CertificateStorage : pb::IMessage<CertificateStorage> {
    private static readonly pb::MessageParser<CertificateStorage> _parser = new pb::MessageParser<CertificateStorage>(() => new CertificateStorage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CertificateStorage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::REMME.Auth.Client.RemmeApi.Models.Proto.CertificateReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CertificateStorage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CertificateStorage(CertificateStorage other) : this() {
      hash_ = other.hash_;
      owner_ = other.owner_;
      revoked_ = other.revoked_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CertificateStorage Clone() {
      return new CertificateStorage(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private string hash_ = "";
    /// <summary>
    /// Hash of the certificate raw binary.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private string owner_ = "";
    /// <summary>
    /// The UID field of a certificate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "revoked" field.</summary>
    public const int RevokedFieldNumber = 3;
    private bool revoked_;
    /// <summary>
    /// TODO: Exploit some of certificate fields to resolve hash collisions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Revoked {
      get { return revoked_; }
      set {
        revoked_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CertificateStorage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CertificateStorage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (Owner != other.Owner) return false;
      if (Revoked != other.Revoked) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (Revoked != false) hash ^= Revoked.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Hash);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Owner);
      }
      if (Revoked != false) {
        output.WriteRawTag(24);
        output.WriteBool(Revoked);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (Revoked != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CertificateStorage other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.Revoked != false) {
        Revoked = other.Revoked;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hash = input.ReadString();
            break;
          }
          case 18: {
            Owner = input.ReadString();
            break;
          }
          case 24: {
            Revoked = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
